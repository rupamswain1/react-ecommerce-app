{"ast":null,"code":"import { takeLatest, call, put } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.type';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../fireBase/firebase.utils';\nimport { fetchCollectionSuccess, fetchCollectionFaliure } from '../../redux/shop/shop.actions';\nexport function* fetchCollectionAsync() {\n  try {\n    const collectionsRef = firestore.collection('Collection');\n    const snapshot = yield collectionsRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionFaliure(error.message));\n  } // dispatch(fetchCollectionStart());\n  // collectionsRef.get().then(snapshot=>\n  //    { const collectionMap=convertCollectionsSnapshotToMap(snapshot);\n  //     dispatch(fetchCollectionSuccess(collectionMap))\n  // }).catch(error=>dispatch(fetchCollectionFaliure(error.errorMessage)))\n\n}\n;\nexport function* fetchCollectionStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["/home/rupam/Documents/Development/react-ecommerce-app/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionSuccess","fetchCollectionFaliure","fetchCollectionAsync","collectionsRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionStart","FETCH_COLLECTION_START"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,IAApB,EAAyBC,GAAzB,QAAmC,oBAAnC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAAQC,SAAR,EAAkBC,+BAAlB,QAAwD,+BAAxD;AACA,SAAQC,sBAAR,EAA+BC,sBAA/B,QAA4D,+BAA5D;AACA,OAAO,UAAUC,oBAAV,GAAgC;AACnC,MACA;AAAC,UAAMC,cAAc,GAACL,SAAS,CAACM,UAAV,CAAqB,YAArB,CAArB;AACD,UAAMC,QAAQ,GAAE,MAAMF,cAAc,CAACG,GAAf,EAAtB;AACA,UAAMC,cAAc,GAAC,MAAMZ,IAAI,CAACI,+BAAD,EAAiCM,QAAjC,CAA/B;AACA,UAAMT,GAAG,CAACI,sBAAsB,CAACO,cAAD,CAAvB,CAAT;AACC,GALD,CAMA,OAAMC,KAAN,EAAY;AACR,UAAMZ,GAAG,CAACK,sBAAsB,CAACO,KAAK,CAACC,OAAP,CAAvB,CAAT;AACH,GATkC,CAWnC;AACA;AACA;AACA;AACA;;AACH;AAAA;AAID,OAAO,UAAUC,oBAAV,GAAgC;AACnC,QAAMhB,UAAU,CACZG,eAAe,CAACc,sBADJ,EAEZT,oBAFY,CAAhB;AAIH","sourcesContent":["import {takeLatest, call,put} from 'redux-saga/effects';\nimport ShopActionTypes from './shop.type'\nimport {firestore,convertCollectionsSnapshotToMap} from '../../fireBase/firebase.utils';\nimport {fetchCollectionSuccess,fetchCollectionFaliure} from '../../redux/shop/shop.actions'\nexport function* fetchCollectionAsync(){\n    try\n    {const collectionsRef=firestore.collection('Collection');\n    const snapshot= yield collectionsRef.get();\n    const collectionsMap=yield call(convertCollectionsSnapshotToMap,snapshot);\n    yield put(fetchCollectionSuccess(collectionsMap));\n    }\n    catch(error){\n        yield put(fetchCollectionFaliure(error.message));\n    }\n\n    // dispatch(fetchCollectionStart());\n    // collectionsRef.get().then(snapshot=>\n    //    { const collectionMap=convertCollectionsSnapshotToMap(snapshot);\n    //     dispatch(fetchCollectionSuccess(collectionMap))\n    // }).catch(error=>dispatch(fetchCollectionFaliure(error.errorMessage)))\n};\n\n\n\nexport function* fetchCollectionStart(){\n    yield takeLatest(\n        ShopActionTypes.FETCH_COLLECTION_START,\n        fetchCollectionAsync\n    );\n}\n\n"]},"metadata":{},"sourceType":"module"}