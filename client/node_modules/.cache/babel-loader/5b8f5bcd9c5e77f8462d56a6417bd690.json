{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../fireBase/firebase.utils';\nimport UserActionType from './user.type';\nimport { SignInSuccess, SingInFail, SignOutSuccess, SignOutFail, SignUpFail, SignUP, SignUpSuccess } from './user.actions';\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    console.log(userAuth);\n    if (!userAuth) return;\n    yield setSnapShot(userAuth);\n  } catch (error) {\n    yield put(SingInFail(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    console.log(user);\n    yield put(SignUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(SignUpFail(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield setSnapShot(user, additionalData);\n}\nexport function* signOutUser() {\n  try {\n    const userRef = auth.signOut();\n    console.log(userRef);\n    yield put(SignOutSuccess());\n  } catch (error) {\n    yield put(SignOutFail(error));\n  }\n}\nexport function* setSnapShot(user, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, user, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SingInFail(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield setSnapShot(user);\n  } catch (error) {\n    yield put(SingInFail(error));\n  }\n}\nexport function* googleSignInStart() {\n  console.log('start');\n  yield takeLatest(UserActionType.GOOGLE_SIGNIN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    //console.log('signInWithEmail called')\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield setSnapShot(user);\n  } catch (error) {\n    put(SingInFail(error));\n  }\n}\nexport function* emailSignInStart() {\n  yield takeLatest(UserActionType.EMAIL_SIGNIN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionType.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* StartingSignOut() {\n  yield takeLatest(UserActionType.SIGNOUT_START, signOutUser);\n}\n_c = StartingSignOut;\nexport function* signUpStart() {\n  yield takeLatest(UserActionType.SIGNUP_START, signUp);\n}\nexport function* signUpSuccess() {\n  yield takeLatest(UserActionType.SIGNUP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(googleSignInStart), call(emailSignInStart), call(onCheckUserSession), call(StartingSignOut), call(signUpStart), call(signUpSuccess)]);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"StartingSignOut\");","map":{"version":3,"sources":["/home/rupam/Documents/Development/react-ecommerce-app/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","getCurrentUser","UserActionType","SignInSuccess","SingInFail","SignOutSuccess","SignOutFail","SignUpFail","SignUP","SignUpSuccess","isUserAuthenticated","userAuth","console","log","setSnapShot","error","signUp","payload","email","password","displayName","user","createUserWithEmailAndPassword","additionalData","signInAfterSignUp","signOutUser","userRef","signOut","userSnapshot","get","id","data","signInWithGoogle","signInWithPopup","googleSignInStart","GOOGLE_SIGNIN_START","signInWithEmail","signInWithEmailAndPassword","emailSignInStart","EMAIL_SIGNIN_START","onCheckUserSession","CHECK_USER_SESSION","StartingSignOut","SIGNOUT_START","signUpStart","SIGNUP_START","signUpSuccess","SIGNUP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest,put,all,call} from 'redux-saga/effects';\nimport {auth, googleProvider, createUserProfileDocument,getCurrentUser} from '../../fireBase/firebase.utils';\nimport UserActionType from './user.type'\nimport {SignInSuccess,SingInFail,SignOutSuccess,SignOutFail,SignUpFail,SignUP,SignUpSuccess} from './user.actions';\n\nexport function* isUserAuthenticated(){\n    try{\n        const userAuth=yield getCurrentUser();\n        console.log(userAuth)\n        if(!userAuth) return;\n        yield setSnapShot(userAuth)\n    }catch(error){\n        yield put(SingInFail(error))\n    }\n}\n\nexport function* signUp({payload:{email,password,displayName}}){\n    try{\n       const {user}= yield  auth.createUserWithEmailAndPassword(email,password)\n       console.log(user) \n       yield put(SignUpSuccess({user,additionalData:{displayName}}))\n    }catch(error){\n        yield put(SignUpFail(error));\n    }\n    \n\n}\n\nexport function* signInAfterSignUp({payload:{user,additionalData}}){\n    yield setSnapShot(user,additionalData);\n}\n\nexport function* signOutUser(){\n    try{\n        const userRef=auth.signOut();\n        console.log(userRef);\n        yield put(SignOutSuccess())\n    }catch(error){\n        yield put(SignOutFail(error));\n    }\n}\n\nexport function* setSnapShot(user,additionalData){\n    try{ \n        \n        const userRef=yield call(createUserProfileDocument,user,additionalData);\n        const userSnapshot=yield userRef.get();\n        yield put(SignInSuccess({id:userSnapshot.id,...userSnapshot.data()}));\n    }catch(error){\n        yield put(SingInFail(error));\n    }\n}\nexport function* signInWithGoogle(){\n    try{ \n        const {user}=yield auth.signInWithPopup(googleProvider);\n        yield setSnapShot(user);\n    }catch(error){\n        yield put(SingInFail(error));\n    }\n}\n\nexport function* googleSignInStart(){\n    console.log('start')\n    yield takeLatest(UserActionType.GOOGLE_SIGNIN_START,signInWithGoogle)\n}\n\nexport function* signInWithEmail({payload:{email,password}}){\n    try{\n        //console.log('signInWithEmail called')\n        const {user}=yield auth.signInWithEmailAndPassword(email,password);\n        yield setSnapShot(user);\n    }catch(error){\n        put(SingInFail(error));\n    }\n}\n\nexport function* emailSignInStart(){\n    yield takeLatest(UserActionType.EMAIL_SIGNIN_START,signInWithEmail)\n}\n\nexport function* onCheckUserSession(){\n    yield takeLatest(UserActionType.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* StartingSignOut(){\n    yield takeLatest(UserActionType.SIGNOUT_START, signOutUser)\n}\n\nexport function* signUpStart(){\n    yield takeLatest(UserActionType.SIGNUP_START,signUp)\n}\n\nexport function* signUpSuccess(){\n    yield takeLatest(UserActionType.SIGNUP_SUCCESS,signInAfterSignUp);\n}\n\nexport function* userSagas(){\n    yield all([call(googleSignInStart),call(emailSignInStart), call(onCheckUserSession),call(StartingSignOut),\n    call(signUpStart),call(signUpSuccess)])\n}\n\n"]},"metadata":{},"sourceType":"module"}