{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { batch } from 'react-redux';\nconst config = {\n  apiKey: \"AIzaSyAIuoyjbJOFI0gDtucXJfnERcVMqbpnbU0\",\n  authDomain: \"react-ecomm-4f435.firebaseapp.com\",\n  projectId: \"react-ecomm-4f435\",\n  storageBucket: \"react-ecomm-4f435.appspot.com\",\n  messagingSenderId: \"753146556520\",\n  appId: \"1:753146556520:web:a60f9569bf17781e3b0bdd\"\n}; //add user to firestore\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  console.log(additionalData); //console.log('additional data : '+additionalData)\n\n  if (!userAuth) return; //console.log(userAuth.uid);\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    console.log(email);\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n}; //google authenticaton\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = googleProvider => auth.signInWithPopup(googleProvider); // util to add shop data to Firebase\n\nexport const addCollectionAndDocument = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); //console.log(collectionRef);\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    //console.log(obj)\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n}; //Get collectionData from Firestore\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  //console.log(collections)\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection; //console.log(accumulator)      \n\n    return accumulator;\n  }, {}); //console.log(transformedCollection);\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport default firebase;","map":{"version":3,"sources":["/home/rupam/Documents/Development/react-ecommerce-app/src/fireBase/firebase.utils.js"],"names":["firebase","batch","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","console","log","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","message","initializeApp","auth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","addCollectionAndDocument","collectionKey","objectsToAdd","collectionRef","collection","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { batch } from 'react-redux';\n\nconst config={\n    apiKey: \"AIzaSyAIuoyjbJOFI0gDtucXJfnERcVMqbpnbU0\",\n    authDomain: \"react-ecomm-4f435.firebaseapp.com\",\n    projectId: \"react-ecomm-4f435\",\n    storageBucket: \"react-ecomm-4f435.appspot.com\",\n    messagingSenderId: \"753146556520\",\n    appId: \"1:753146556520:web:a60f9569bf17781e3b0bdd\"\n  };\n //add user to firestore\n  export const createUserProfileDocument=async(userAuth,additionalData)=>{\n    console.log(additionalData)\n    //console.log('additional data : '+additionalData)\n    if(!userAuth) return;\n    //console.log(userAuth.uid);\n    const userRef=firestore.doc(`users/${userAuth.uid}`);\n    \n    const snapShot=await userRef.get();\n    if(!snapShot.exists){\n      const{displayName, email}=userAuth;\n      const createdAt=new Date();\n      console.log(email)\n      try{\n        await userRef.set({\n          displayName,\n          email,createdAt,\n          ...additionalData\n        })\n      }\n      catch(error){\n        console.log('error creating user',error.message);\n      }\n      \n\n    }\n    return userRef;\n   \n    }\n  //google authenticaton\n  firebase.initializeApp(config);\n  \n  export const auth=firebase.auth();\n  export const firestore=firebase.firestore();\n \n  export const googleProvider=new firebase.auth.GoogleAuthProvider();\n  googleProvider.setCustomParameters({prompt:'select_account'});\n  export const signInWithGoogle=(googleProvider)=>auth.signInWithPopup(googleProvider);\n\n  // util to add shop data to Firebase\n  export const addCollectionAndDocument=async (collectionKey, objectsToAdd)=>{\n     const collectionRef=firestore.collection(collectionKey);\n     //console.log(collectionRef);\n      const batch=firestore.batch()\n      objectsToAdd.forEach(obj=>{\n        //console.log(obj)\n        const newDocRef=collectionRef.doc();\n        batch.set(newDocRef,obj);\n      }\n      );\n      return await batch.commit()\n  }\n\n  //Get collectionData from Firestore\n  export const convertCollectionsSnapshotToMap=collections=>{\n    //console.log(collections)\n    const transformedCollection=collections.docs.map(doc=>{\n      const {title,items}=doc.data();\n      return{\n        routeName: encodeURI(title.toLowerCase()),\n        id: doc.id,\n        title,\n        items\n      }\n    });\n\n    return transformedCollection.reduce((accumulator,collection)=>\n    {accumulator[collection.title.toLowerCase()]=collection\n      //console.log(accumulator)      \n      return accumulator;\n    },\n    {})\n    //console.log(transformedCollection);\n    \n\n  }\n\n  export const getCurrentUser=()=>{\n    return new Promise((resolve,reject)=>{\n      const unsubscribe=auth.onAuthStateChanged(userAuth=>{unsubscribe();\n      resolve(userAuth);\n      },reject)\n    }\n\n    )\n  }\n  export default firebase;"]},"metadata":{},"sourceType":"module"}